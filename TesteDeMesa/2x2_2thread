#include <iostream>
#include <random>
#include <thread>

using namespace std;

void threadFor(int &matA, int &matB, int &matC){
    int l, c, x, aux=0;
    for(l=0; l<2; l++){
    for(c=0; c<2; c++){
            matC[l][c]=0;
            for(x=0; x<2; x ++){
               aux = thread tMult{threadMultiplica, l, c, x, ref(matA), ref(matB), ref(matC), aux};
            }
            matC[l][c]= aux;
            aux = 0;
    }
}
}

void threadMultiplica(int l, int c, int x, int &matA, int &matB, int &matC, int aux){
    aux += matA[l][x] * matB[x][c];

    }

int main(){
    //Configura qual é o gerador
    default_random_engine gerador;
    //Configura qual é o intervalo (nesse caso de 1 até 100)
uniform_int_distribution <int> distribuicao(1,10);

int matA[2][2], matB[2][2], matC[2][2], aux=0;
int l, c, x;

//MATRIZ A
for(l=0; l<2; l++){
    for(c=0; c<2; c++){
        matA[l][c] = distribuicao(gerador);
    }
}

//MATRIZ B
for(l=0; l<2; l++){
    for(c=0; c<2; c++){
        matB[l][c] = distribuicao(gerador);
    }
}

//MATRIZ C

thread tfor{threadFor, ref(matA), ref(matB), ref(matC)};
/*for(l=0; l<2; l++){
    for(c=0; c<2; c++){
            matC[l][c]=0;
            for(x=0; x<2; x ++){
                aux += matA[l][x] * matB[x][c];
            }
            matC[l][c]= aux;
            aux = 0;
    }
}*/

//PRINTS
for(int l=0; l<2; l++){
    for( c=0; c<2; c++){
        cout << "|"<< matA[l][c] << "|";
    }
    cout << endl;
}
cout<< endl;

for(int l=0; l<2; l++){
    for( c=0; c<2; c++){
        cout << "|"<< matB[l][c] << "|";
    }
    cout << endl;
}
cout<<endl;

for(int l=0; l<2; l++){
    for( c=0; c<2; c++){
        cout << "|"<< matC[l][c] << "|";
    }
    cout << endl;
}
return 0;
}
